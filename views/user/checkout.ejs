<%-include('header')-%>

<div id="page-content">
    <!--Page Title-->


    <div class="page section-header text-center">
        <div class="page-title">
            <div > 
                <h1 class="page-width">Checkout</h1>
            </div>
          </div>
    </div>


    <!--End Page Title-->

    <!-- <div class="page section-header text-center">
        <div class="page-title" style="display: flex; justify-content: space-between;">
            <div>
                <h1 class="page-width">Checkout</h1>
            </div>
            <div>
                <h1 class="page-width">Checkout</h1>
            </div>
        </div>
    </div> -->


    <!-- <div class="page section-header text-center">
        <div class="page-title" style="display: flex;">
            <div style="margin-left: auto;">
                <h1 class="page-width">Checkout</h1>
            </div>
            <div style="margin-right: auto;">
                <h1 class="page-width">Checkout</h1>
            </div>
        </div>
    </div> -->

    <!-- <div class="page section-header text-center">
        <div class="page-title" style="display: flex;">
            <div  style="margin-right: auto;">
                <h1 class="page-width">Checkout</h1>
            </div>
            <div style="margin-right: auto; ">
                <h1 class="page-width" style="background-color: blueviolet;">Checkout</h1>
            </div>
        </div>
    </div> -->







    
    
    
    
    
    








    
    <div class="container">
        

        <div class="row billing-fields">
            <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12 sm-margin-30px-bottom">
                <div class="create-ac-content bg-light-gray padding-20px-all">


                    <!-- <div class="col-12 col-sm-12 col-md-4 col-lg-4 mb-4"> -->

                        <% if (locals.coupons && locals.coupons.length > 0) { %>
                            <h5 id="availableCoupon" >Available Coupons</h5>
                            <%coupons.forEach((coupons)=>{%>
                                
                            <div id="availableCoupons">
                                <div class="coupon" data-code="<%=coupons.name%>"><%=coupons.name%>    -<%= coupons.discountValue%>% off</div>
                            </div>
                            
                            <%})%>
                            
                            <hr>
                            <!-- </div> -->
                            
                            
                            
                            <h5 id="couponHeader" >Discount Codes</h5>
                            <div class="form-group " style="display: inline;"  >
                                <input type="text" id="couponInput" name="coupon" class="mt-2">
                                <span   id="alert" class="couponAlert" style="color: red;"></span><br>
                                <input type="button" id="applyCouponBtn" class="btn btn-secondary btn--small" value="Apply Coupon">
                            </div>
                            <%}%>









                    <!-- <br> -->
                    <div id="your-address" class="coupon-checkout-content mt-5">
                        <div class="discount-coupon">
                            <h2 class="login-title mb-3">Billing Address</h2>
                    
                            <% billingDetails.forEach((billingDetail, index) => { %>

                                <div class="row">
                                    <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                        <span>First Name:</span>
                                        <span><%= billingDetail.name %></span>
                                    </div>
                    
                                    <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                        <span>Telephone:</span>
                                        <span><%= billingDetail.telephone %></span>
                                    </div>
                                </div>
                    
                                <div class="row">
                                    <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                        <span>Address:</span>
                                        <span><%= billingDetail.address %></span>
                                    </div>
                                    <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                        <span>City:</span>
                                        <span><%= billingDetail.city %></span>
                                    </div>
                                </div>
                    
                                <div class="row">
                                    <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                        <span>Post Code:</span>
                                        <span><%= billingDetail.postCode %></span>
                                    </div>
                                    <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                        <span>Region / State:</span>
                                        <span><%= billingDetail.regionState %></span>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                        <span>select</span>
                                        <input type="radio" name="address-selection" value="address1" 
                                               data-user-id="<%=cartItems[0].userId %>"  
                                               data-address-id="<%= billingDetail._id %>" 
                                               <% if (index === 0) { %> checked <% } %>> <!-- Check the first radio button by default -->
                                    </div>
                                    <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                        <a href="" class="btn btn--secondary billingAddress__remove" title="Remove tem" data-user-id="<%=cartItems[0].userId %>"  data-address-id="<%= billingDetail._id %>"><i class="icon icon anm anm-times-l"></i></a>

                                    </div>
                                </div>
                                <hr>
                            <% }); %>
                        </div>
                    </div>





                    <div class="customer-box customer-coupon">
                        <h3 class="font-15 xs-font-13"><i class=""></i>  <a href="#add-address" class="text-white text-decoration-underline" data-toggle="collapse">Add Address</a></h3>
                    </div>  

                    <div id="add-address" class="collapse coupon-checkout-content">
                        <div class="discount-coupon">
                            <form  id="address-form" action="/address-added" method="POST">
                                    <h2 class="login-title mb-3">Billing details</h2>
                                    <div class="row">
                                        <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                            <label for="input-name">First Name <span class="required-f">*</span></label>
                                            <input name="name"  id="input-name" type="text">
                                            <div class="error" style="color: red;"></div>
                                        </div>

                                        <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                            <label for="input-telephone">Telephone <span class="required-f">*</span></label>
                                            <input name="telephone"  id="input-telephone" type="tel">
                                            <div class="error" style="color: red;"></div>
                                        </div>


                                    </div>
                                    
        
                                    <div class="row">
                                        <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                            <label for="input-homeAddress">Address <span class="required-f">*</span></label>
                                            <input name="homeAddress"  id="input-homeAddress" type="text">
                                            <div class="error" style="color: red;"></div>
                                        </div>

                                        <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                            <label for="input-city">City <span class="required-f">*</span></label>
                                            <input name="city"  id="input-city" type="text">
                                            <div class="error" style="color: red;"></div>
                                        </div>

                                    </div>
                                   
                                    <div class="row">
                                        <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                            <label for="input-postcode">Post Code <span class="required-f">*</span></label>
                                            <input name="postcode"  id="input-postcode" type="text">
                                            <div class="error" style="color: red;"></div>
                                        </div>

                                        <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                            <label for="input-zone">Region / State <span class="required-f">*</span></label>
                                            <input name="state"  id="input-state" type="text">
                                            <div class="error" style="color: red;"></div>
                                        </div>
                                        <div class="form-group col-md-6 col-lg-6 col-xl-6 required">
                                            <button class="btn" style="background-color: cadetblue;" type="submit">Submit</button>
                                        </div>
                                    </div>
                            </form> 
                        </div>
                    </div>

                </div>
               
            </div> 


            <div class="col-xl-6 col-lg-6 col-md-6 col-sm-12">
                <div class="your-order-payment">
                    <div class="your-order">
                        <h2 class="order-title mb-4">Your Order</h2>



                        <div class="table-responsive-sm order-table"> 
                            <table class="bg-white table table-bordered table-hover text-center">
                                <thead>
                                    <tr>
                                        <th class="text-left">Product Name</th>
                                        <th>Price</th>
                                        <th>Qty</th>
                                        <th>Subtotal</th>
                                    </tr>
                                </thead>
                                <% locals.cartItems.forEach(item => { %>

                                <tbody class="font-weight-600" >
                                    <tr>
                                        <td hidden data-product-image="<%= JSON.stringify(item.images) %>" data-cart-id="<%= item._id%>" class="text-left"><%= item.name %></td>
                                        <td  data-product-id="<%= item.productId %>" data-product-name="<%= item.name %>" data-cart-id="<%= item._id%>" class="text-left"><%= item.name %></td>

                                        <td data-product-unitPrice="<%= item.unitPrice %>" data-cart-id="<%=item._id%>">₹<%= item.unitPrice %></td>
                                        <td data-product-quantity="<%= item.quantity %>" data-cart-id="<%=item._id%>"><%=item.quantity%></td>
                                        <td data-product-price="<%= item.price %>" data-cart-id="<%=item._id%>">₹<%= item.price %></td>
                                    </tr>
                                </tbody>
                        <% }); %>

                                <tfoot class="font-weight-600">
                                    <tr>
                                        <td colspan="2" class="text-right">Shipping </td>
                                        <td data-shipping-value="free" >FREE</td>
                                    </tr>
                                    <tr>
                                        <td  colspan="2" class="text-right"  >Tax </td>
                                        <td data-tax-value="<%= taxValue.toFixed(2)%>" >₹<%= taxValue.toFixed(2)%> </td>
                                    </tr>

                                    <tr>
                                        <td colspan="2" class="text-right">Grand Total</td>
                                        <td id="grandTotal" data-grandTotal-value="<%= grandTotal.toFixed(2)%>" >₹<%= grandTotal.toFixed(2) %></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>


                        
                    </div>
                    <hr />






                    <div class="your-payment">
                        <h2 class="payment-title mb-3">Payment Method</h2>
                        <div class="payment-method">
                            <div class="form-group">
                                <label>Select Payment Method:</label>
                                <div>
                                    <input type="radio" id="cash-on-delivery" name="payment-method" value="cash-on-delivery" checked>
                                    <label for="cash-on-delivery" >Cash On Delivery</label>
                                </div>
                                <div>
                                    <input type="radio" id="online-payment" name="payment-method" value="online-payment">
                                    <label for="online-payment">Online Payment</label>
                                </div>
                                <div>
                                    <input type="radio" id="wallet-payment" name="payment-method" value="wallet-payment">
                                    <label for="wallet-payment">Wallet Payment</label>
                                </div>
                            </div>
                        </div>
                    </div>
                  

                    
                    <div class="order-button-payment">
                        <span id="chooseAddressMessage" style="color: red; display: none;">Please choose an address before placing the order.</span>
                        <span id="BalanceMessage" style="color: red; display: none;"></span>
                        <br>
                        <a class="btn btn-place-order"  style="background-color: cadetblue;" value="Place order" type="submit">Place order</a>
                    </div>




                </div>
            </div>
        </div>
    </div>
    
</div>
<%-include('footer')-%>





<!-- Include SweetAlert library -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>





 <script>
    document.getElementById("applyCouponBtn").addEventListener("click", function () {
        const couponCode = document.getElementById("couponInput").value;
        const discountHeader = document.querySelector("#couponHeader");
        const couponInputGroup = document.querySelector(".form-group");

        const grandTotalElement = document.getElementById('grandTotal');
        // Get the value of the 'data-grandTotal-value' attribute
        const totalPrice = grandTotalElement.getAttribute('data-grandTotal-value');



        fetch("/couponApply", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                // Add any additional headers if needed
            },
            body: JSON.stringify({ coupon: couponCode,totalPrice }),
        })
        .then((response) => {
            if (response.ok) {
                return response.json();
            } else {
                return response.json().then((error) => {
                    throw new Error(error.error); // Throw an Error with the error message
                });
            }
        })
        .then((data) => {
            if (data.discount !== null) {
                // Handle successful response
                handleSuccessfulResponse(data, discountHeader, couponInputGroup);
            } else {
                // Handle case where discount is null
                handleNullDiscountResponse();
            }
        })
        .catch((error) => {
            // Handle errors
            handleErrorResponse(error);
        });
    });

    function handleSuccessfulResponse(data, discountHeader, couponInputGroup) {
        // Update the coupon name and its discounted value
        const couponRow = document.createElement("tr");
        couponRow.innerHTML = `
            <td colspan="2" class="text-right">Coupon Applied <br>${data.couponName}</td>
            <td id="couponAppliedValue" data-coupon-id="${data.couponId}" data-coupon-discountPercentage="${data.discountPercentage}"  data-coupon-discount="${data.discount.toFixed(2)}">₹${data.discount.toFixed(2)}</td>
            <td>
                <button class="btn remove-coupon" id="${data.couponId}" data-coupon-id="${data.couponId}" type="button"><i class="icon icon anm anm-times-l"></i></button>
            </td>
        `;
        const tfoot = document.querySelector("tfoot");
        tfoot.insertBefore(couponRow, tfoot.lastElementChild);

        const availableCoupons = document.querySelectorAll(".coupon");
        availableCoupons.forEach((coupon) => {
            if (coupon.dataset.code === data.couponName) {
                coupon.parentNode.style.display = "none"; // Hide the applied coupon
            }
        });

        // Hide coupon header and input group
        discountHeader.style.display = "none";
        couponInputGroup.style.display = "none";

        // Add click event listener to the remove coupon button
        const removeCouponButton = couponRow.querySelector(".remove-coupon");
        removeCouponButton.addEventListener("click", function () {
            couponRow.remove();
            discountHeader.style.display = "block";
            couponInputGroup.style.display = "block";

            // Show the hidden coupon
            availableCoupons.forEach((coupon) => {
                if (coupon.dataset.code === data.couponName) {
                    coupon.parentNode.style.display = "block";
                }
            });
        });

        // Update grand total
        const grandTotalElement = document.getElementById("grandTotal");
        const changed = grandTotalElement.innerText;
        let grandTotalValue1 = parseFloat(changed.substring(1));
        let positiveNumber = parseFloat(data.discount) * -1;
        grandTotalElement.innerHTML = grandTotalValue1 - positiveNumber;
        grandTotalElement.dataset.grandTotalValue = grandTotalValue1 - positiveNumber.toFixed(2);

        // Clear coupon input
        document.getElementById("couponInput").value = "";
    }

    function handleNullDiscountResponse() {
        // Handle case where discount is null
        document.querySelectorAll(".couponAlert").forEach((element) => {
            element.innerHTML = "Discounted Total Price is null";
        });
        setTimeout(() => {
            document.querySelectorAll(".couponAlert").forEach((element) => {
                element.innerHTML = "";
            });
            document.getElementById("couponInput").value = "";
        }, 3000);
    }

    function handleErrorResponse(error) {
        // Handle errors
        document.querySelectorAll(".couponAlert").forEach((element) => {
            element.innerHTML = error.message;
        });
        setTimeout(() => {
            document.querySelectorAll(".couponAlert").forEach((element) => {
                element.innerHTML = "";
            });
            document.getElementById("couponInput").value = "";
        }, 3000);
    }
</script>








 







<script>
    document.addEventListener('DOMContentLoaded', function () {
    // Click event for the "Place order" button
    $(".btn-place-order").on("click", function (event) {
        // Prevent the default form submission
        event.preventDefault();

        // Get the selected checkbox button value
        const selectedAddress = $("input[name='address-selection']:checked").data("address-id");

        // Select the chooseAddressMessage element
        const chooseAddressMessage = $("#chooseAddressMessage");

        if (!selectedAddress) {
            // If no address is selected, show the message and stop the script
            chooseAddressMessage.show();
            return;
        }

        // If an address is selected, hide the message
        chooseAddressMessage.hide();
        // Get the dataset values from the table
        const cartItems = [];
        $("table tbody").find("tr").each(function () {
            const productId = $(this).find("td[data-product-id]").data("product-id");
            const isCartId = $(this).find("td[data-cart-id]").data("cart-id");
            const productName = $(this).find("td[data-product-name]").data("product-name");
            const unitPrice = $(this).find("td[data-product-unitPrice]").data("product-unitprice");
            const quantity = $(this).find("td[data-product-quantity]").data("product-quantity");
            const price = $(this).find("td[data-product-price]").data("product-price");
            const imagesData = $(this).find("td[data-product-image]").data("product-image");

            cartItems.push({
                productId: productId, // Include the productId
                isCartId:isCartId,
                productName: productName,
                unitPrice: unitPrice,
                quantity: quantity,
                images: imagesData, // Include the image data
                price: price,
            });

            
        });

        // Get the dataset values from the footer
        const shipping = $("tfoot td[data-shipping-value]").data("shipping-value");
        const tax = $("tfoot td[data-tax-value]").data("tax-value");
        const couponId = $("td#couponAppliedValue").data("coupon-id") ?? undefined;
        const couponDiscount = $("td#couponAppliedValue").data("coupon-discount") ?? undefined;
        const couponDiscountPercentage = $("td#couponAppliedValue").data("coupon-discountPercentage") ?? undefined;


        console.log(couponId,'565',909);


        const grandTotalElement = $("tfoot td[data-grandTotal-value]");
        const grandTotalHtml = grandTotalElement.html(); // Assuming this returns "$2010.00"
       const grandTotal= parseFloat(grandTotalHtml.replace(/[^0-9.-]+/g,""));





    // Check the selected payment method
    const isOnlinePaymentSelected = $("#online-payment").is(":checked");
    const isCashOnDeliverySelected = $("#cash-on-delivery").is(":checked");
    const isWalletPaymentSelected = $("#wallet-payment").is(":checked");

    const selectedPaymentMethod = $("input[name='payment-method']:checked").val();


        // Create an object with all the data
        const orderData = {
            selectedAddress: selectedAddress,
            orderItems: cartItems,  //  this object is product price quantity 
            shipping: shipping,
            tax: tax,
            totalValue: grandTotal ,
            paymentMethod :selectedPaymentMethod,
            discountCoupon: couponId ,// Adding the couponId variable to the orderData object
            couponDiscountPercentage,
            discountPrice: couponDiscount
        };

    

        // Execute the appropriate payment method logic
        if (isOnlinePaymentSelected) {
            // Execute Razorpay payment integration
            executeRazorpayPayment(orderData);


        } else if (isCashOnDeliverySelected) {
            console.log('COD',selectedPaymentMethod);

            if( grandTotal>1000){
                console.log("Order above Rs 1000 should not be allowed for COD");

               return  $("#BalanceMessage").text("Order above Rs 1000 should not be allowed for COD").show();
                
            }




            // Execute fetch method for cash on delivery
            executeCashOnDelivery(orderData);
        } else if(isWalletPaymentSelected){

            console.log('wallet',selectedPaymentMethod);
            executeWalletPayment(orderData);

           
            // executeCashOnDelivery(orderData);
        }else  {
            // Handle other payment methods if needed
            console.log("Payment method not supported");
        }
    });

    // Change event for the address selection
    $("input[name='address-selection']").on("change", function () {
        // Hide the chooseAddressMessage when an address is selected
        $("#chooseAddressMessage").hide();
    });
});
function executeRazorpayPayment(orderData) {

    console.log(orderData)
    console.log(898);
    // return
    // AJAX call to create order ID
    var settings = {
        "url": "/create/orderId",
        "method": "POST",
        "timeout": 0,
        "headers": {
            "Content-Type": "application/json"
        },
        "data": JSON.stringify({
            "amount": orderData.totalValue * 100
        }),
    };

    $.ajax(settings).done(function (response) {
        const orderId = response.orderId;

        // Razorpay payment integration
        var options = {
            "key": "rzp_test_EPbDs3EDqJVES2",
            "amount": orderData.totalValue * 100,
            "currency": "INR",
            "name": "Velocity",
            "description": "Online Payment",
            "image": "",
            "order_id": orderId,
            "handler": function (response) {
                // Fetch to place order after successful payment


                executePlaceOrder(orderData);
            }
        };

        var rzp1 = new Razorpay(options);
        rzp1.open();
    });
}
function executeCashOnDelivery(orderData) {
    // Fetch to place order for cash on delivery
    console.log('its cash on delivery');
    executePlaceOrder(orderData);
}
function executeWalletPayment(orderData){
    executePlaceOrder(orderData);
}
function executePlaceOrder(orderData) {
    fetch('/placeOrder', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            orderData,
        }),
    })
    .then(response => {
        if (!response.ok) {
            console.log(4444);
            $("#BalanceMessage").text("Insufficient wallet Balance").show();

            console.log(response);
            throw new Error();
        }
        console.log(1);
        console.log(response);
        // return response.json();
    })
    .then(data => {
        console.log(2);
        console.log(data);
        // return
        window.location.href = '/orderplaced/success';
    })
    .catch(error => {
        console.error('Error:', error);
        if (error && error.message === "Insufficient wallet balance") {
            $("#BalanceMessage").text("Insufficient wallet Balance").show();
        } 
    });
}




</script>


















<!-- 

<script>
    $(document).ready(function () {
        $('input[name="payment-method"]').change(function () {
            if ($(this).is(':checked') && $(this).val() === 'online-payment') {
                $('.btn-place-order').attr('id', 'rzp-button1');
            } else {
                $('.btn-place-order').removeAttr('id');
            }
        });
    });
</script> -->







<script>
    document.addEventListener('DOMContentLoaded', function () {
      const removeButtons = document.querySelectorAll('.billingAddress__remove');


      
    // return





      removeButtons.forEach(button => {


        button.addEventListener('click', function (event) {
          event.preventDefault();
          const addressId = button.dataset.addressId;
        //   const userId = button.dataset.userId;
  
          console.log('qwerty-=-=-asdf-=-=-=zxcv');
          // Display confirmation dialog using SweetAlert
          Swal.fire({
            title: 'Are you sure?',
            text: 'You are about to remove this billing address.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
          }).then((result) => {
            if (result.isConfirmed) {
              // Proceed with removal

              console.log('confirmed');
            //   console.log(userId);
              console.log(addressId);
              console.log();


              fetch(`/user/remove/${addressId}`, {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                },
              })
              .then(response => {
                if (!response.ok) {
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }
                // Display success message using SweetAlert
                Swal.fire({
                  title: 'Success!',
                  text: 'Billing address removed successfully.',
                  icon: 'success',
                }).then(() => {
                  // Reload the page
                  window.location.reload();
                });
              })
              .catch(error => {
                console.error('Error removing billing address:', error);
                // Display error message using SweetAlert
                Swal.fire({
                  title: 'Error!',
                  text: 'Failed to remove billing address. Please try again later.',
                  icon: 'error',
                });
              });
            }
          });
        });
      });
    });
  </script>
  
  
  
       <script>
          document.addEventListener('DOMContentLoaded', function () {
              const form = document.getElementById("address-form");
      
              form.addEventListener('submit', async function (event) {
                  event.preventDefault();
      
                  let valid = validateForm();
      
                  if (valid) {
                      const formData = new FormData(form);
                      const formObject = {};
                      formData.forEach((value, key) => {
                          formObject[key] = value;
                      });
  
                      
  
                      // Now, formObject contains the form values
                      console.log(formObject);
                      try {
                          const response = await fetch("/address-added", {
                              method: "POST",
                              headers: {
                                  'Content-Type': 'application/json',
                              },
                              body: JSON.stringify({ formObject  }),
                          });
  
  
                          
      
                          if (response.ok) {
                              console.log("Form submitted successfully!");
  
                              window.location.href = '/checkout';
  
                          } else {
                              console.error("Form submission failed:", response.statusText);
                          }
                      } catch (error) {
                          console.error("Error during form submission:", error);
                      }
                  }
              });
      
              function validateForm() {
                  let valid = true;
      
                  // Reset previous error messages
                  const errorMessages = form.querySelectorAll('.error');
                  errorMessages.forEach(function (error) {
                      error.textContent = '';
                  });
      
                  // Validate User Name
                  const name = form.querySelector('#input-name').value.trim();
                  if (name === '') {
                      valid = false;
                      displayError('input-name', 'User Name is required.');
                  }
      
                  const telephone = form.querySelector("#input-telephone").value.trim();
                  if (telephone === '' || isNaN(telephone) || telephone.length !== 10) {
                      valid = false;
                      displayError('input-telephone', 'Enter a valid 10-digit number.');
                  }
      
                  const postcode = form.querySelector("#input-postcode").value.trim();
                  if (postcode === '' || isNaN(postcode) || postcode.length !== 6) {
                      valid = false;
                      displayError('input-postcode', 'Enter a valid postcode.');
                  }
      
                  const cityName = form.querySelector('#input-city').value.trim();
                  if (cityName === '') {
                      valid = false;
                      displayError('input-city', 'City is required.');
                  }
      
                  const address = form.querySelector("#input-homeAddress").value.trim();
                  if (address === '') {
                      valid = false;
                      displayError('input-homeAddress', 'Address is required.');
                  }
      
                  const state = form.querySelector("#input-state").value.trim();
                  if (state === '') {
                      valid = false;
                      displayError('input-state', 'State is required.');
                  }
      
                  return valid;
              }
      
              function displayError(elementId, errorMessage) {
                  const errorElement = form.querySelector(`#${elementId} + .error`);
                  if (errorElement) {
                      errorElement.textContent = errorMessage;
                  }
              }
          });
      </script>
  


</body>
</html>