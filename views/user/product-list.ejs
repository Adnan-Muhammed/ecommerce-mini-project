<%-include('header')-%>


<div id="page-content" >
    
  <!--Collection Banner-->
    <div class="slideshow slideshow-wrapper pb-4">
    <div class="home-slideshow">
        <div class="slide">
            <div class="blur-up lazyload">
                <img class="blur-up lazyload desktop-show" data-src="/assets/images/slideshow-banners/home3-banner.jpg" src="/assets/images/slideshow-banners/home3-banner.jpg" alt="There is Beauty in Simplycity" title="There is Beauty in Simplycity" />
                <img class="blur-up lazyload mobile-show" data-src="/assets/images/slideshow-banners/home3-banner-mobile.jpg" src="/assets/images/slideshow-banners/home3-banner-mobile.jpg" alt="There is Beauty in Simplycity" title="There is Beauty in Simplycity" />
                <div class="slideshow__text-wrap slideshow__overlay classic middle">
                    <div class="slideshow__text-content left">
                        <div class="container">
                            <div class="wrap-caption left">
                                <h2 class="h1 mega-title slideshow__title">There is Beauty in Simplycity</h2>
                                <span class="mega-subtitle slideshow__subtitle">Save up to 50% off this weekend only</span>
                                <span class="btn" >Shop now</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
 </div>


 <div class="container">
    <div class="row">
        <!--Sidebar-->
        <div class="col-12 col-sm-12 col-md-3 col-lg-3 sidebar filterbar">
            <div class="closeFilter d-block d-md-none d-lg-none"><i class="icon icon anm anm-times-l"></i></div>
            <div class="sidebar_tags">
                <!--Categories-->
                
            
                <!--Price Filter-->
                <div class="sidebar_widget filterBox filter-widget">
                    <div class="widget-title">
                        <h2>Price</h2>
                    </div>
                    <div  class="price-filter">
                        <div id="slider-range" class="ui-slider ui-slider-horizontal ui-widget ui-widget-content ui-corner-all">
                            <div class="ui-slider-range ui-widget-header ui-corner-all"></div>

                            <span class="ui-slider-handle ui-state-default ui-corner-all" tabindex="0"></span>
                            <span class="ui-slider-handle ui-state-default ui-corner-all" tabindex="0"></span>
                        </div>
                        <div class="row">
                            <div class="col-6">
                                <p class="no-margin"><input id="amount" name="priceValue" type="text"></p>
                            </div>
                            <div class="col-6 text-right margin-25px-top">
                                <button class="btn btn-secondary btn--small" id="btn-1"  style="background-color: darkslategray; ">
                                    <p style="font-size: 11px; color: beige; ">High to Low</p>
                                </button>
                                <button class="btn btn-secondary btn--small" id="btn-2"  style="background-color: darkslategray;">
                                    <p style="font-size: 11px;  color: beige;">Low to High</p>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="sidebar_widget filterBox filter-widget">

                    <div class="widget-title">
                        <h2>Search</h2>
                    </div>
                    <!-- <ul class="dropdown" style="background-color: rgb(249, 251, 251); width: 150px;"> -->
                        <div class="form-group has-search"   id="slider-range"> 

                            <input  class="fa fa-search form-control-feedback" type="text"   value=""  id="search-value"  class="form-control" placeholder="Search" style="border: 0cm; color: rgb(15, 5, 5);">
                            <button type="button" class=" btn btn-secondary btn--small"  id="search-btn"  style="background-color: darkslategray;">
                                <p style="font-size: 11px;  color: beige;">Enter</p>
                            </button>
                        </div>
                    <!-- </ul> -->
                </div>
            </div>
            <!--End Price Filter-->
                <!--Color Swatches-->
                
              
                <!--Product Tags-->
                
                <!--end Product Tags-->
            </div>
        </div>
        <!--End Sidebar-->
        <!--Main Content-->
        <div class="col-12 col-sm-12 col-md-9 col-lg-9 main-col">
            <div class="productList">
                <!--Toolbar-->
          
                <!--End Toolbar-->
                <div class="grid-products grid--view-items">
                    <div class="row" id="orginalList" >
                        <% product.forEach((product) => { %>

                        <!-- goodjnijn k -->
                        <div class="col-6 col-sm-6 col-md-4 col-lg-3 item">
                            <!-- start product image -->
                            <div class="product-image">
                                <!-- start product image -->
                                <a href="/productdetails/<%=product._id%>">
                                    <!-- image -->
                                    <img class="primary blur-up lazyload"  data-src="<%=product.image[0]%>"    src="<%=product.image[0]%>" alt="image" title="product" />
                                    <!-- End image -->
                                    <!-- Hover image -->
                                    <img class="hover blur-up lazyload"  data-src="<%=product.image[1]%>"    src="<%=product.image[0]%>" alt="image" title="product" />
                                    <!-- End hover image -->
                                </a>
                                <!-- end product image -->

                                <!-- Start product button -->
                               
                                
                                <!-- end product button -->
                            </div>
                            <!-- end product image -->

                            <!--start product details -->
                            <div class="product-details text-center">
                                <!-- product name -->
                                <div class="product-name">
                                    <a href=""><%=product.name%></a>
                                </div>
                                <!-- End product name -->
                                <!-- product price -->


                                <% if(product.offerPrice < product.price){%>
                                    <div class="product-price">
                                        <span class="price"> <del><%=product.price%></del> </span>
                                        <br>
                                        <span class="price"><%= Math.round(product.offerPrice)%></span>
                                    </div>
                                <%}else{%>
                                    <div class="product-price">
                                        <span class="price"> <%=product.price%></span>
                                        
                                    </div>
                                <%}%>


                                <!-- End product price -->
                                
                               
                            </div>
                            <!-- End product details -->
                        </div>
                       

                        <% }) %>

                    </div>
                </div>
            </div>
            
        </div>
        <!--End Main Content-->
    </div>
</div>
   
            <div class="infinitpaginOuter" style="display: flex; justify-content: center;" id="orginalPagination">
                <div class="infinitpagin  ">	
                    <% if (totalPages > 1) { %>
                        <ul class="pagination ">
                            <% for (let i = 1; i <= totalPages; i++) { %>
                                <li class="btn-dark page-item <%= i === currentPage ? 'active' : '' %>"  style="background-color: aliceblue;">
                                    <a class="page-link" style="margin: 2px; "  href="?page=<%= i %>">
                                        <p style="font-size: 15px; color: black;" ><%= i %></p>
                                    </a>
                                </li>
                            <% } %>
                        </ul>
                    <% } %>
                </div>
            </div>

            <!--End Main Content-->
        </div>
    </div>
    
</div>


<!-- EJS script code with corrections -->




<!-- price sorting script -->



<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('search-value');
        const productListContainer = document.getElementById('orginalList');
        const paginationContainer = document.getElementById('orginalPagination');
        
        // Helper function to render product with offer price logic
        function renderProduct(product) {
            let priceHtml = '';
            if (product.offerPrice && product.offerPrice < product.price) {
                priceHtml = `
                    <span class="price"> <del>${product.price}</del> </span>
                    <br>
                    <span class="price">${Math.round(product.offerPrice)}</span>
                `;
            } else {
                priceHtml = `<span class="price">${product.price}</span>`;
            }
            
            return `
                <div class="col-6 col-sm-6 col-md-4 col-lg-3 item">
                    <div class="product-image">
                        <a href="/productdetails/${product._id}">
                            <img class="primary blur-up lazyload" data-src="${product.image[0]}" src="${product.image[0]}" alt="${product.name}" title="product" />
                            <img class="hover blur-up lazyload" data-src="${product.image[1]}" src="${product.image[1]}" alt="${product.name}" title="product" />
                        </a>
                    </div>
                    <div class="product-details text-center">
                        <div class="product-name">
                            <a href="">${product.name}</a>
                        </div>
                        <div class="product-price">
                            ${priceHtml}
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Helper function to render pagination
        function renderPagination(totalPages, currentPage, params) {
            if (totalPages <= 1) return '';
            
            return `
                <div class="infinitpaginOuter" style="display: flex; justify-content: center;">
                    <div class="infinitpagin">    
                        <ul class="pagination">
                            ${Array.from({ length: totalPages }, (_, i) => `
                                <li class="btn-dark page-item ${i + 1 === currentPage ? 'active' : ''}" style="background-color: aliceblue;">
                                    <a class="page-link2" style="margin: 2px;" 
                                        data-category="${params.categoryData}" 
                                        data-page="${i + 1}" 
                                        data-min-value="${params.minValue}" 
                                        data-max-value="${params.maxValue}" 
                                        data-search-term="${params.searchTerm}"
                                        data-descending="${params.descending}">
                                        <p style="font-size: 15px; color: black;">${i + 1}</p>
                                    </a>
                                </li>
                            `).join('')}
                        </ul>
                    </div>
                </div>
            `;
        }
        
        // Single function to update product list and pagination
        function updateProductDisplay(products, totalPages, currentPage, params) {
            productListContainer.innerHTML = products.map(renderProduct).join('');
            paginationContainer.innerHTML = renderPagination(totalPages, currentPage, params);
            
            // Add event listeners to new pagination links
            attachPaginationListeners();
        }
        
        // Function to attach pagination event listeners
        function attachPaginationListeners() {
            const paginationLinks = document.querySelectorAll('.page-link2');
            paginationLinks.forEach(link => {
                // Remove any existing listeners to prevent duplicates
                link.replaceWith(link.cloneNode(true));
            });
            
            // Re-select after cloning
            document.querySelectorAll('.page-link2').forEach(link => {
                link.addEventListener('click', async function(event) {
                    event.preventDefault();
                    
                    const params = {
                        categoryData: this.dataset.category,
                        page: this.dataset.page,
                        minValue: this.dataset.minValue,
                        maxValue: this.dataset.maxValue,
                        searchTerm: this.dataset.searchTerm,
                        descending: this.dataset.descending
                    };
                    
                    try {
                        const response = await fetch(`/category/fetch/${params.categoryData}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(params),
                        });
                        
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        
                        const responseData = await response.json();
                        const { sortedProducts, totalPages, currentPage } = responseData;
                        
                        updateProductDisplay(sortedProducts, totalPages, currentPage, params);
                    } catch (error) {
                        console.error('Error:', error);
                    }
                });
            });
        }
        
        // Main fetch function
        const fetchData = async (url, value) => {
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ value }),
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                
                const { sortedProducts, totalPages, currentPage, categoryData, minValue, maxValue, searchTerm, descending } = await response.json();
                
                const params = {
                    categoryData,
                    minValue,
                    maxValue,
                    searchTerm,
                    descending
                };
                
                updateProductDisplay(sortedProducts, totalPages, currentPage, params);
            } catch (error) {
                console.error('Error:', error);
            }
        };
        
        // Event listeners for buttons
        document.getElementById('btn-1').addEventListener('click', function() {
            let searchTerm = searchInput.value.trim();     
            const value = document.getElementById('amount').value.trim();
            fetchData('/category/<%=categoryName%>/ascending', { value, searchTerm });
        });
        
        document.getElementById('btn-2').addEventListener('click', function() {
            const value = document.getElementById('amount').value.trim();
            let searchTerm = searchInput.value.trim(); 
            fetchData('/category/<%=categoryName%>/descending', { searchTerm, value });
        });
        
        // Initial attachment of pagination listeners
        attachPaginationListeners();
    });
</script>



  




<!-- search filter  by name-->

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('search-value');
        const searchButton = document.getElementById('search-btn');
        const productListContainer = document.getElementById('orginalList');
        const paginationContainer = document.getElementById('orginalPagination');
        
        // Helper function to render product with offer price logic
        function renderProduct(product) {
            let priceHtml = '';
            if (product.offerPrice && product.offerPrice < product.price) {
                priceHtml = `
                    <span class="price"> <del>${product.price}</del> </span>
                    <br>
                    <span class="price">${Math.round(product.offerPrice)}</span>
                `;
            } else {
                priceHtml = `<span class="price">${product.price}</span>`;
            }
            
            return `  
                <div class="col-6 col-sm-6 col-md-4 col-lg-3 item">
                    <div class="product-image">
                        <a href="/productdetails/${product._id}">
                            <img class="primary blur-up lazyload" data-src="${product.image[0]}" src="${product.image[0]}" alt="image" title="product" />
                            <img class="hover blur-up lazyload" data-src="${product.image[1]}" src="${product.image[1]}" alt="image" title="product" />
                        </a>
                    </div>
                    <div class="product-details text-center">
                        <div class="product-name">
                            <a href="">${product.name}</a>
                        </div>
                        <div class="product-price">
                            ${priceHtml}
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Helper function to render pagination
        function renderPagination(totalPages, currentPage, params) {
            if (totalPages <= 1) return '';
            
            return `
                <div class="infinitpaginOuter" style="display: flex; justify-content: center;">
                    <div class="infinitpagin">    
                        <ul class="pagination">
                            ${Array.from({ length: totalPages }, (_, i) => `
                                <li class="btn-dark page-item ${i + 1 === currentPage ? 'active' : ''}" style="background-color: aliceblue;">
                                    <a class="page-link2" style="margin: 2px;"
                                        data-category="${params.categoryData}" 
                                        data-page="${i + 1}" 
                                        data-min-value="${params.minValue}" 
                                        data-max-value="${params.maxValue}" 
                                        data-search-term="${params.searchTerm}">
                                        <p style="font-size: 15px; color: black;">${i + 1}</p>
                                    </a>
                                </li>
                            `).join('')}
                        </ul>
                    </div>
                </div>`;
        }
        
        // Function to update product display
        function updateProductDisplay(products, totalPages, currentPage, params) {
            productListContainer.innerHTML = products.map(renderProduct).join('');
            paginationContainer.innerHTML = renderPagination(totalPages, currentPage, params);
            
            // Add event listeners to new pagination links
            attachPaginationListeners();
        }
        
        // Function to attach pagination event listeners
        function attachPaginationListeners() {
            const paginationLinks = document.querySelectorAll('.page-link2');
            paginationLinks.forEach(link => {
                // Remove any existing listeners to prevent duplicates
                link.replaceWith(link.cloneNode(true));
            });
            
            // Re-select after cloning
            document.querySelectorAll('.page-link2').forEach(link => {
                link.addEventListener('click', async function(event) {
                    event.preventDefault();
                    
                    const params = {
                        categoryData: this.dataset.category,
                        page: this.dataset.page,
                        minValue: this.dataset.minValue,
                        maxValue: this.dataset.maxValue,
                        searchTerm: this.dataset.searchTerm
                    };
                    
                    try {
                        const response = await fetch(`/category/fetch/${params.categoryData}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(params),
                        });
                        
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        
                        const responseData = await response.json();
                        const { sortedProducts, totalPages, currentPage } = responseData;
                        
                        updateProductDisplay(sortedProducts, totalPages, currentPage, params);
                    } catch (error) {
                        console.error('Error:', error);
                    }
                });
            });
        }
        
        // Main fetch function for search
        const fetchData = async (url, value) => {
            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(value),
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                
                const searchProducts = await response.json();
                const searchProductsArray = searchProducts.searchProducts;
                const { totalPages, currentPage, categoryData, minValue, maxValue, searchTerm } = searchProducts;
                
                const params = {
                    categoryData,
                    minValue,
                    maxValue,
                    searchTerm
                };
                
                updateProductDisplay(searchProductsArray, totalPages, currentPage, params);
            } catch (error) {
                console.error('Error:', error);
            }
        };
        
        // Event listener for search button
        searchButton.addEventListener('click', function() {                       
            const searchTerm = searchInput.value.trim();                            
            const value = document.getElementById('amount').value.trim();
            fetchData('/category/<%=categoryName%>/searchProduct', { searchTerm, value });   
        });
        
        // Initial attachment of pagination listeners
        attachPaginationListeners();
        
    });
</script>
<!-- fetch  -->

<script>
document.addEventListener('DOMContentLoaded', function() {
    const productListContainer = document.getElementById('orginalList');
    const paginationContainer = document.getElementById('orginalPagination');
    
    // Helper function to render product with offer price logic
    function renderProduct(product) {
        let priceHtml = '';
        if (product.offerPrice && product.offerPrice < product.price) {
            priceHtml = `
                <span class="price"> <del>${product.price}</del> </span>
                <br>
                <span class="price">${Math.round(product.offerPrice)}</span>
            `;
        } else {
            priceHtml = `<span class="price">${product.price}</span>`;
        }
        
        return `
            <div class="col-6 col-sm-6 col-md-4 col-lg-3 item">
                <div class="product-image">
                    <a href="/productdetails/${product._id}">
                        <img class="primary blur-up lazyload" src="${product.image[0]}" alt="${product.name}" title="product" />
                        <img class="hover blur-up lazyload" src="${product.image[1]}" alt="${product.name}" title="product" />
                    </a>
                </div>
                <div class="product-details text-center">
                    <div class="product-name">
                        <a href="">${product.name}</a>
                    </div>
                    <div class="product-price">
                        ${priceHtml}
                    </div>
                </div>
            </div>
        `;
    }
    
    // Helper function to render pagination
    function renderPagination(totalPages, currentPage, params) {
        if (totalPages <= 1) return '';
        
        return `
            <div class="infinitpaginOuter" style="display: flex; justify-content: center;">
                <div class="infinitpagin">    
                    <ul class="pagination">
                        ${Array.from({ length: totalPages }, (_, i) => `
                            <li class="btn-dark page-item ${i + 1 === currentPage ? 'active' : ''}" style="background-color: aliceblue;">
                                <a class="page-link2" style="margin: 2px;" 
                                    data-category="${params.categoryData}" 
                                    data-page="${i + 1}" 
                                    data-minValue="${params.minValue}" 
                                    data-maxValue="${params.maxValue}" 
                                    data-searchTerm="${params.searchTerm}">
                                    <p style="font-size: 15px; color: black;">${i + 1}</p>
                                </a>
                            </li>
                        `).join('')}
                    </ul>
                </div>
            </div>
        `;
    }
    
    // Function to update product display
    function updateProductDisplay(products, totalPages, currentPage, params) {
        productListContainer.innerHTML = products.map(renderProduct).join('');
        paginationContainer.innerHTML = renderPagination(totalPages, currentPage, params);
        
        // Add event listeners to new pagination links
        attachPaginationListeners();
    }
    
    // Function to attach pagination event listeners
    function attachPaginationListeners() {
        const paginationLinks = document.querySelectorAll('.page-link2');
        paginationLinks.forEach(link => {
            // Remove any existing listeners to prevent duplicates
            link.replaceWith(link.cloneNode(true));
        });
        
        // Re-select after cloning
        document.querySelectorAll('.page-link2').forEach(link => {
            link.addEventListener('click', async function(event) {
                event.preventDefault();
                
                const params = {
                    categoryData: this.dataset.category,
                    page: this.dataset.page,
                    minValue: this.dataset.minValue,
                    maxValue: this.dataset.maxValue,
                    searchTerm: this.dataset.searchTerm
                };
                
                try {
                    const response = await fetch(`/category/fetch/${params.categoryData}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(params),
                    });
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    
                    const responseData = await response.json();
                    const { sortedProducts, totalPages, currentPage } = responseData;
                    
                    updateProductDisplay(sortedProducts, totalPages, currentPage, params);
                } catch (error) {
                    console.error('Error:', error);
                }
            });
        });
    }
    
    // Initial attachment of pagination listeners
    attachPaginationListeners();
});
</script>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

<%-include('footer')-%>
    </body>
    </html>